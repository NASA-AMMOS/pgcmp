# This file is a template, and might need editing before it works on your project.
# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options
  
services:
  - postgres:12.2-alpine

variables:
  POSTGRES_DB: nice_marmot
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust
  ARTIFACT_TARGET: /tmp/artifacts


after_script:
  - echo "After script section"
  - echo "For example you might do some cleanup here"

build1:
  stage: build
  script:
    - gem install org-ruby
    - make all

functional-test:
  stage: test
  image: postgres
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - export PGUSER=$POSTGRES_USER
    - export PGPORT=5432
    - echo "running tests"
    - (cd test; PGUSER=$POSTGRES_USER ./run-tests.sh)

connect-test:
  image: postgres
  script:
  # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - which psql
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "show port;"
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "show config_file;"
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "show unix_socket_directories;"
  - psql -d "user=runner port=5432 dbname=${POSTGRES_DB}" -c "select 'OK' as query_from_connstring;"
  - ls -l /var/run/postgresql

deploy1:
  stage: deploy
  script:
    - echo "Do your deploy here"
