variables:
  POSTGRES_DB: nice_marmot
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: runner
  POSTGRES_HOST_AUTH_METHOD: trust
  ARTIFACT_TARGET: /tmp/artifacts
  REGUSER: runner
  SUPERUSER: runner
  PGPORT: 5432
  MAHOUTHOME: /builds/cbbrowne/mahout
  PGCMPHOME: /builds/cbbrowne/mahout/pgcmp
  PGBINDIR: /usr/lib/postgresql/12/bin
  PG_CONTAINER: $CI_REGISTRY_IMAGE:my-custom-postgres
  PG_HOST: custompg

services:
  - name: $CI_REGISTRY_IMAGE:my-custom-postgres
    alias: $PG_HOST

stages:
  - builddocker
  - build
  - test
  - release
  - deploy

#before_script:
#  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

builddocker:
  image: docker:19.03.1
  stage: builddocker
  services:
    - docker:19.03.1-dind
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build --pull -t $PG_CONTAINER docker
  - docker push $PG_CONTAINER

build1:
  stage: build
  image: docker:19.03.1
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - gem install org-ruby
    - make all

connect-test:
  stage: test
  image: postgres
  services:
    - $PG_HOST
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - which psql
    - psql -h $PG_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - psql -h $PG_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "show port;"
    - psql -h $PG_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "show config_file;"
    - psql -h $PG_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "show unix_socket_directories;"
    - psql -d "host=${PG_HOST} user=runner port=5432 dbname=${POSTGRES_DB}" -c "select 'OK' as query_from_connstring;"
    - ls -l /var/run/postgresql
    
functional-test:
  stage: test
  image: postgres
  services:
    - $PG_HOST
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - export PGUSER=$POSTGRES_USER
    - export PGPORT=5432
    - export PGHOST=${PG_HOST}
    - echo "running tests"
    - (cd test; PGUSER=$POSTGRES_USER ./run-tests.sh)

